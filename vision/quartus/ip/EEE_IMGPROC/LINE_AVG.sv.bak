module line_average (
	input clk,
	input [23:0] c_px, l_px,
	output[7:0] r_out, g_out, b_out
);


wire [23:0] avg_px;
reg [23:0] avg_2r;
wire[23:0] avg_2w;
reg [23:0] avg_4r;
wire [23:0] avg_4w;
reg [23:0] avg_8r;
wire [23:0] avg_8w;
reg [23:0] avg_16r;
wire [23:0] avg_16w;
reg [23:0] avg_32r;
wire [23:0] avg_32w;
reg [23:0] avg_64r;
wire [23:0] avg_64w;
reg [23:0] avg_128r;
wire [23:0] avg_128w;
reg [23:0] avg_256r;
wire [23:0] avg_256w;

assign avg_2w = (c_px[23:16] + l_px[23:16])>>1;

assign avg_4w[23:16] = (avg_2r[23:16] + avg_2w[23:16]) >> 1;
assign avg_4w[15:8] = (avg_2r[15:8] + avg_2w[15:8]) >> 1;
assign avg_4w[7:0] = (avg_2r[7:0] + avg_2w[7:0]) >> 1;


always @(posedge clk) begin
	avg_2r <= avg_2w;
	avg_2_px[1][0] = ;
	avg_2_px[1][1] = (c_px[15:8] + l_px[15:8])>>1;
	avg_2_px[1][2] = (c_px[7:0] + l_px[7:0])>>1;
	
	avg_4_px[0][0] = avg_4_px[1][0];
	avg_4_px[0][1] = avg_4_px[1][1];
	avg_4_px[0][2] = avg_4_px[1][2];
	avg_4_px[1][0] = 
	avg_4_px[1][1] = (avg_2_px[0][1] + avg_2_px[1][1]) >> 1;
	avg_4_px[1][2] = (avg_2_px[0][2] + avg_2_px[1][2]) >> 1;
	
	
	
	avg_8_px[0][0] = avg_8_px[1][0];
	avg_8_px[0][1] = avg_8_px[1][1];
	avg_8_px[0][2] = avg_8_px[1][2];
	avg_8_px[1][0] = (avg_4_px[0][0] + avg_4_px[1][0]) >> 1;
	avg_8_px[1][1] = (avg_4_px[0][1] + avg_4_px[1][1]) >> 1;
	avg_8_px[1][2] = (avg_4_px[0][2] + avg_4_px[1][2]) >> 1;
	
	
	
	avg_4_px[0][0] = avg_4_px[1][0];
	avg_4_px[0][1] = avg_4_px[1][1];
	avg_4_px[0][2] = avg_4_px[1][2];
	avg_4_px[1][0] = (avg_2_px[0][0] + avg_2_px[1][0]) >> 1;
	avg_4_px[1][1] = (avg_2_px[0][1] + avg_2_px[1][1]) >> 1;
	avg_4_px[1][2] = (avg_2_px[0][2] + avg_2_px[1][2]) >> 1;
	
	
	
	avg_4_px[0][0] = avg_4_px[1][0];
	avg_4_px[0][1] = avg_4_px[1][1];
	avg_4_px[0][2] = avg_4_px[1][2];
	avg_4_px[1][0] = (avg_2_px[0][0] + avg_2_px[1][0]) >> 1;
	avg_4_px[1][1] = (avg_2_px[0][1] + avg_2_px[1][1]) >> 1;
	avg_4_px[1][2] = (avg_2_px[0][2] + avg_2_px[1][2]) >> 1;
end



endmodule